Shader "Transparent/Cutout/Transparent" 
{ 
	Properties 
	{
		_Color ("Main Color", Color) = (1,1,1,1)
		_MainTex ("Base (RGB) Trans (A)", 2D) = "white" {} 
		_CutTex ("Cutout (A)", 2D) = "white" {} 
		_Cutoff ("Alpha cutoff", Range(0,1)) = 0.5 
	}

	SubShader
	{
		LOD 100

		Tags
		{
			"Queue" = "Transparent"
			"IgnoreProjector" = "True"
			"RenderType" = "Transparent"
		}

		Stencil
		{
			Ref [_Stencil]
			Comp [_StencilComp]
			Pass [_StencilOp]
		}
		
		Cull Off
		Lighting Off
		ZWrite Off
		ZTest [unity_GUIZTestMode]
		Fog { Mode Off }
		Offset -1, -1
		Blend SrcAlpha OneMinusSrcAlpha
		ColorMask [_ColorMask]

		CGPROGRAM 	
			#pragma vertex vert
			#pragma fragment frag
			#include "UnityCG.cginc"

			struct appdata_t
			{
				float4 vertex : POSITION;
				float2 texcoord : TEXCOORD0;
				float2 texcoord2 : TEXCOORD1;
				fixed4 color : COLOR;
			};
	
			struct v2f
			{
				float4 vertex : SV_POSITION;
				half2 texcoord : TEXCOORD0;
				float2 texcoord2 : TEXCOORD1;
				fixed4 color : COLOR;
			};
	
			sampler2D _MainTex; 
			sampler2D _CutTex; 
			fixed4 _Color; 
			float _Cutoff;
				
			v2f vert (appdata_t v)
			{
				v2f o;
				o.vertex = mul(UNITY_MATRIX_MVP, v.vertex);
				o.texcoord = TRANSFORM_TEX(v.texcoord, _MainTex);
				o.color = v.color;
				return o;
			}
				
			fixed4 frag (v2f i) : COLOR
			{
				fixed4 col = tex2D(_MainTex, i.texcoord) * i.color;
				fixed ca = tex2D(_CutTex, i.texCoo
				clip (col.a - 0.01);
				return col;
			}

			void surf (Input IN, inout SurfaceOutput o)
			{ 
				fixed4 c = tex2D(_MainTex, IN.uv_MainTex) * _Color; float ca = tex2D(_CutTex, IN.uv_MainTex).a; o.Albedo = c.rgb;

			 if (ca &gt; _Cutoff)
			   o.Alpha = c.a;
			 else
			   o.Alpha = 0;

} ENDCG }

Fallback "Transparent/VertexLit" } 